🎯 1. 믹스인을 사용하는 이유 정립 : **변수, 클래스와의 역할 분리 철저히**
중복 제거: 자주 반복되는 스타일 묶음을 공통화
재사용성 향상: 다양한 컴포넌트에서 일관된 스타일 적용
가독성 향상: 복잡한 스타일 로직을 간결하게
변경 용이성: 믹스인 하나만 수정하면 전역 적용 가능

🧩 2. 믹스인 전략 구성 요소
1) 목적에 따라 분류
레이아웃 유틸리티
flex-center, grid-template, container, position-absolute ...

컴포넌트 스타일 조합
button-base, input-style, card-box, badge-style ...

반응형 대응
respond(sm), respond(md)와 같이 미디어 쿼리 대응

타이포그래피 스케일
heading(level), body-text(size), caption() ...

애니메이션 / 인터랙션
fade-in, hover-underline, slide-up ...

2) 믹스인 명명 규칙
'카테고리-기능' 식으로 명확하게
layout-flex-center, typography-heading, button-hover ...

가능하면 접두사 사용해서 구분 
layout-, typography-, effect-  ...

3) 변수와 믹스인 분리 전략
단일 값이나 색상 → 변수
$primary-color: #007bff;

속성 묶음 → 믹스인
@mixin button-base {
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: bold;
  background-color: $primary-color;
  color: white;
}


| 기준                                                         | 믹스인 | 변수 | 클래스                                     |
| -----------------------------------------------------   | ------ | ----- | ----------------------------------------- |
| 속성 여러 개 묶음                                        | ✅    | ❌   | ✅                                            |
| 값 하나 (색상, 여백 등)                                  | ❌    | ✅   | ❌                                            |
| 논리적으로 조건 처리 필요 (ex. heading level)     | ✅    | ❌   | ❌                                            |
| 유틸리티처럼 사용 (ex. margin-0)                     | ❌    | ❌   | ✅ (Tailwind 또는 유틸 클래스 패턴) |





✅ 믹스인 전략
디자인 시스템에서 **믹스인(Mixin)**으로 만들어야 할 부분은 재사용 가능하고, 반복적으로 사용되는 스타일 블록
**하나 이상의 CSS 속성들이 함께 묶여 반복적으로 등장**할 때 믹스인으로 정의
✅ 믹스인으로 만들지 않아도 되는 경우
단일 속성 (예: color: $gray-100)만 반복되는 경우 → 변수로 충분
한 번만 쓰이는 스타일

[예시]
🎨 색상 관련
다크닝/라이트닝을 포함한 색상 유틸
테마 색상 배경 + 텍스트 색상 조합
@mixin bg-text($bg-color, $text-color) {
  background-color: $bg-color;
  color: $text-color;
}


📐 간격 (Spacing)
공통 마진 / 패딩 패턴
@mixin spacing($margin: 0, $padding: 0) {
  margin: $margin;
  padding: $padding;
}


🧱 레이아웃
Flexbox 정렬
Grid 설정
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}


🧩 컴포넌트 공통 속성
버튼 스타일 (기본, 호버, 비활성 등)
입력폼 필드 스타일
카드 컨테이너 (쉐도우, 패딩, 보더 등)
@mixin button-base {
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-weight: 600;
  transition: background-color 0.3s;
  &:hover {
    background-color: darken($primary-color, 10%);
  }
}


🖍️ 타이포그래피
텍스트 스타일 (크기, 굵기, 줄 간격 등) → 디자인 시스템에 한하여 개별 컴포넌트 다는 X
@mixin heading($size: 1.5rem, $weight: bold) {
  font-size: $size;
  font-weight: $weight;
  line-height: 1.2;
}


🧭 반응형 / 브레이크포인트
미디어 쿼리 템플릿
@mixin respond($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: 576px) { @content; }
  }
  @else if $breakpoint == md {
    @media (max-width: 768px) { @content; }
  }
  // ...
}


🌀 애니메이션 / 트랜지션
Fade In/Out, Slide 등 공통 효과
@mixin fade-in($duration: 0.3s) {
  opacity: 0;
  animation: fadeIn $duration ease-in forwards;
}




